#!/usr/bin/env node

require('../lib/util/cli');

var hive = require('../index'),
	config = require('../lib/config'),
	_ = require('underscore'),
	options = {},
	debug = false,
	inspector = false,
	spawn = require('child_process').spawn,
	hiveART = ''        +
 ' _   _         \r\n'  +
 '| |_|_|_ _ ___ \r\n'  +
 '|   | | | | -_|\r\n'  +
 '|_|_|_|\\_/|___|\r\n' +
 '\r\n';

GLOBAL.inflection = require('../lib/util/inflection');
GLOBAL.guid = require('../lib/util/guid');

// hide logs
hive.config.debug = false;

// custom template settings
_.templateSettings = {
   evaluate    : /\[%([\s\S]+?)%\]/g,
   interpolate : /\[%=([\s\S]+?)%\]/g
};

function genTemplate(file, context, template) {
	hive.log('Generating template', file, context, template);
	function render(str) {
		var result;
		try {
			result = _.template(str, context);
		} catch(e) {
			hive.log('**TEMPLATE ERROR**', e);
		}
		return result || str;
	}
	if(template) {
		template.once('change', function() {
			file.update(function(data) {
				return render(template.get('data'));
			});
		});
		template.fetch();
	} else {	
		file.update(function(data) {
			return render(data.toString());
		});
	}
}

function genModel(name) {
	
	hive.log('Generating model files for', name);
	
	var singular = name;
	var plural = inflection.pluralize(name);
	
	var context = {
		name: name
	};
	
	var cd = process.env.PWD;
	
	var modelTemplate = new hive.File({path: __dirname + '/templates/Model.js'});
	var queryTemplate = new hive.File({path: __dirname + '/templates/Query.js'});
	var controllerTemplate = new hive.File({path: __dirname + '/templates/Controller.js'});
	var indexTemplate = new hive.File({path: __dirname + '/templates/index.haml'});
	var allTemplate = new hive.File({path: __dirname + '/templates/all.haml'});
	var newTemplate = new hive.File({path: __dirname + '/templates/new.haml'});
	
	var root = new hive.Dir({path: cd});
	var model = new hive.File({path: cd + '/models/' + singular + '.js'});
	var query = new hive.File({path: cd + '/queries/' + plural + '.js'});
	var controller = new hive.File({path: cd + '/controllers/' + singular.toLowerCase() + '.js'});
	genTemplate(model, context, modelTemplate);
	genTemplate(query, context, queryTemplate);
	genTemplate(controller, context, controllerTemplate);
	
	var viewFolder = singular.toLowerCase();
	var views = new hive.Dir({path: cd + '/views/' + viewFolder});
	views.once('success', function() {
		var index = new hive.File({path: cd + '/views/' + viewFolder + '/index.haml'});
		var all = new hive.File({path: cd + '/views/' + viewFolder + '/all.haml'});
		var _new = new hive.File({path: cd + '/views/' + viewFolder + '/new.haml'});
		genTemplate(index, context, indexTemplate);
		genTemplate(all, context, allTemplate);
		genTemplate(_new, context, newTemplate);
	});
	
	views.save();
}

function project(name) {
	
	//Create in cd
	var cd = process.env.PWD;
	var root = new hive.Dir({path: cd});
	root.save();
	
	// paste in the templates
	var templates = new hive.Dir({path: __dirname + '/templates/basic'});
	var copy = templates.paste(root, name);
	copy.bind('pasted', function() {
		
		var extensions = ['.js', '.haml', '.ejs', '.css', '.json'];
		
		// get every file in the new root
		root.find(function(file) {
			if(extensions.indexOf(file.ext()) > -1) {
				genTemplate(file, options);
			}
		 });
	});

}

var child;
function boot(callback) {
	var args = ['index.js'];
	if(debug) {
		args = ['--debug', 'index.js'];
		if(inspector) {
			postBoot.push(function() {
				var nodeInspector = spawn('node-inspector');
				nodeInspector.stdout.on('data', function(data) {
					data = data.toString();
					var url = data.match(/http\S+/g);
					if(url && url[0]) {
						spawn('open', [url[0]]);
					}
					cli
					.write('[')
					.color('cyan')
					.write('node-inspector')
					.color('white')
					.write(']\n\t')
					.write(data.toString());
				});
			});
		}
	}
	child = spawn('node', args);
	child.stdout.pipe(process.stdout, { end: false });
	var started = false;
	child.stdout.on('data', function (data) {
		if(!started && typeof callback === 'function' && data.toString().indexOf('http://') > -1) {
			started = true;
			callback();
		}
	});
	child.on('exit', function (code, signal) {
		if(signal < 4) {
			console.log('Hive server shutdown with:', {code: code, signal: signal});
			process.kill(signal);
		} else {
			process.nextTick(boot);
		}
	});
}

var postBoot = [];
function preview(browser) {
	config(process.env.PWD, function (settings) {
		// preview in chrome
		var url = 'http://' + hive.config.host + ':' + hive.config.port;
		url = url.replace(':80', '');
		_.extend(settings, hive.config);
		postBoot.push(function () {
			spawn(browser, [url]);
		});
	});
}

//Map functionality to args
var commands = {
	new: function(args) {
		options.name = args[args.indexOf('new') + 1];
		cli
		.clear()
		.color('cyan')
		.write(hiveART)
		.color('white');
		if(options.name) {
			project(options.name);
			cli.color('white')
			.write('creating ')
			.color('green', true)
			.write(options.name)
			.color('white')
			.write(' @ ' + process.env.PWD + '/' + options.name + '\n\n');
		}
	},
	model: function(args) {
		options.name = args[args.indexOf('model') + 1];
		if(options.name) {
			genModel(options.name);
			cli.color('white')
			.write('\ngenerating ')
			.color('green')
			.write(options.name)
			.color('white')
			.write(' model, views, and controller\n\n');
		}
	}
};
var flags = {
	'-p': function() {
		preview('open');
	},
	'-db': function() {
		spawn('mongod');
	},
	'-debug': function() {
		debug = true;
	},
	'-i': function() {
		inspector = true;
	}
};

function loop(inputs) {

	var allCommands = _.keys(commands);
	var allFlags = _.keys(flags);
	var commandsRun = 0;
	var flagsRun = 0;
	
	inputs.forEach(function(command) {

		// a command
		if(_.contains(allCommands, command)) {
			commands[command](inputs);
			commandsRun++;
			
		// a flag
		} else if (_.contains(allFlags, command)) {
			flags[command](inputs);
			flagsRun++;
		} 
		
	});
	
	// if no commands have been run, boot
	if(!commandsRun) {
		boot(function() {
			postBoot.forEach(function (func) {
				func();
			});
		});
	}
	
}

loop(process.argv);